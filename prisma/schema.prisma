generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Message {
    id        String   @id @default(uuid())
    name      String
    email     String
    body      String
    createdAt DateTime @default(now())
}

model Employee {
    id            Int    @id @default(autoincrement())
    username      String
    password      String @db.Text
    contactNumber String
    position      String
    imgUrl        String @db.Text
    email         String
}

model Customer {
    id                   String        @id @default(uuid())
    displayName          String
    email                String
    defaultContactNumber String
    photoUrl             String        @db.Text
    isBlocked            Boolean
    defaultAddress       String
    onlineOrders         OnlineOrder[]
    reservations         Reservation[]
}

enum Mode {
    WalkIn
    Online
}

enum PaymentStatus {
    Pending
    Fulfilled
}

model Order {
    id            Int           @id @default(autoincrement())
    mode          Mode
    createdAt     DateTime      @default(now())
    customerName  String
    paymentStatus PaymentStatus
    orderItems    OrderItem[]
    walkInOrders  WalkInOrder[]
    onlineOrders  OnlineOrder[]
}

model WalkInOrder {
    id           Int     @id
    paymentTotal Decimal
    name         String
    order        Order   @relation(fields: [id], references: [id])
}

model OnlineOrder {
    id            Int      @id
    customerId    String
    address       String
    contactNumber String
    deliveryFee   Decimal
    order         Order    @relation(fields: [id], references: [id])
    customer      Customer @relation(fields: [customerId], references: [id])
}

model OrderItem {
    id         Int      @id @default(autoincrement())
    orderId    Int
    quantity   Int
    price      Decimal
    discount   Decimal
    menuItemId Int
    order      Order    @relation(fields: [orderId], references: [id])
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model MenuItem {
    id           Int            @id @default(autoincrement())
    name         String
    description  String
    category     String
    price        Decimal
    isActive     Boolean
    orderItems   OrderItem[]
    imgUrl       String         @db.Text
    DiscountItem DiscountItem[]
}

model Reservation {
    id         String   @id @default(cuid())
    customerId String
    startAt    DateTime
    endAt      DateTime
    fee        Decimal
    guestCount Int
    createdAt  DateTime @default(now())
    customer   Customer @relation(fields: [customerId], references: [id])
}

model Discount {
    id           Int            @id @default(autoincrement())
    endAt        DateTime
    startAt      DateTime
    amount       Decimal
    DiscountItem DiscountItem[]
}

model DiscountItem {
    id         Int      @id @default(autoincrement())
    discountId Int
    menuItemId Int
    discount   Discount @relation(fields: [discountId], references: [id])
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Sales {
    id       Int      @id @default(autoincrement())
    price    Decimal
    quantity Int
    total    Decimal
    soldAt   DateTime
}

enum Status {
    Overstock
    Understock
    InBalance
}

model Equipment {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    price       Decimal
    quantity    Int
    status      Status
}

model Supplier {
    id             Int             @id @default(autoincrement())
    name           String
    description    String
    contactNumber  String
    emailAddress   String
    address        String
    purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
    id                 Int                 @id @default(autoincrement())
    createdAt          DateTime            @default(now())
    supplierId         Int
    supplier           Supplier            @relation(fields: [supplierId], references: [id])
    purchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrderItem {
    id              Int           @id @default(autoincrement())
    name            String
    quantity        Int
    purchaseOrderId Int
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Ingredient {
    id                    Int                    @id @default(autoincrement())
    name                  String
    description           String
    price                 Decimal
    quantity              Int
    status                Status
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    dailyReservationItems DailyReservationItem[]
}

model DailyReservation {
    id                    Int                    @id @default(autoincrement())
    name                  String
    description           String
    status                Status
    dailyReservationItems DailyReservationItem[]
}

model DailyReservationItem {
    id                 Int              @id @default(autoincrement())
    ingredientId       Int
    dailyReservationId Int
    quantity           Int
    ingredient         Ingredient       @relation(fields: [ingredientId], references: [id])
    dailyReservation   DailyReservation @relation(fields: [dailyReservationId], references: [id])
}
