generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Message {
    id        String   @id @default(cuid())
    name      String
    email     String
    body      String
    createdAt DateTime @default(now())
}

model UserInfo {
    userId        String @id
    address       String
    contactNumber String
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model OrderItem {
    id         String   @id @default(cuid())
    userId     String
    menuItemId String
    quantity   String
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model MenuItem {
    id          String      @id @default(cuid())
    name        String
    description String
    price       Decimal
    isActive    Boolean
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    orderItems  OrderItem[]
}

model Reservation {
    id         String   @id @default(cuid())
    userId     String
    startAt    DateTime
    endAt      DateTime
    fee        Decimal
    guestCount Int
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    orders        Order[]
    orderItems    OrderItem[]
    reservations  Reservation[]
    UserInfo      UserInfo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
