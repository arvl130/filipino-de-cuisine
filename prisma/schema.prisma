generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  body      String
  createdAt DateTime @default(now())
}

model Employee {
  id            Int    @id @default(sequence())
  username      String
  password      String
  contactNumber String
  position      String
  imgUrl        String
  email         String
}

model CustomerInfo {
  id                   String   @id
  dateOfBirth          DateTime
  defaultContactNumber String
  defaultAddress       String
  isBlocked            Boolean  @default(false)
}

enum Mode {
  WalkIn
  Online
}

enum PaymentStatus {
  Pending
  Fulfilled
  Cancelled
}

model Order {
  id            Int           @id @default(sequence())
  mode          Mode
  createdAt     DateTime      @default(now())
  customerName  String
  paymentStatus PaymentStatus @default(Pending)
  isArchived    Boolean       @default(false)
  orderItems    OrderItem[]
  walkInOrders  WalkInOrder[]
  onlineOrders  OnlineOrder[]
  sales         Sales[]
}

model WalkInOrder {
  id           Int     @id
  paymentTotal Decimal
  name         String
  order        Order   @relation(fields: [id], references: [id])

  @@index([id])
}

model OnlineOrder {
  id              Int            @id
  customerId      String
  address         String
  contactNumber   String
  additionalNotes String
  paymentIntentId String         @unique
  deliveryFee     Decimal
  deliveryStatus  DeliveryStatus @default(Pending)
  order           Order          @relation(fields: [id], references: [id])

  @@index([id])
}

enum DeliveryStatus {
  Pending
  Preparing
  OutForDelivery
  Received
  Cancelled
}

model Rate {
  id         Int      @id @default(sequence())
  rating     String
  review     String
  createdAt  DateTime @default(now())
  customerId String
}

model BasketItem {
  id         Int      @id @default(sequence())
  customerId String
  quantity   Int      @default(1)
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([menuItemId])
}

model OrderItem {
  id         Int      @id @default(sequence())
  orderId    Int
  quantity   Int
  price      Decimal
  discount   Decimal
  menuItemId Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
}

model MenuItem {
  id            Int            @id @default(sequence())
  name          String
  description   String
  category      String
  price         Decimal
  isActive      Boolean
  imgUrl        String
  orderItems    OrderItem[]
  discountItems DiscountItem[]
  basketItems   BasketItem[]
  sales         Sales[]
}

enum AttendedStatus {
  Pending
  Missed
  Completed
  Cancelled
}

model Reservation {
  id                        Int                        @id @default(sequence())
  customerId                String
  fee                       Decimal
  selectedDate              String
  paymentStatus             PaymentStatus              @default(Pending)
  attendedStatus            AttendedStatus             @default(Pending)
  createdAt                 DateTime                   @default(now())
  additionalNotes           String
  paymentIntentId           String                     @unique
  isArchived                Boolean                    @default(false)
  reservationSlots          ReservationSlot[]
  reservationSelectedTables ReservationSelectedTable[]
  reservationSelectedTimes  ReservationSelectedTime[]
}

model ReservationSelectedTime {
  id            Int         @id @default(sequence())
  time          String
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

model ReservationSelectedTable {
  id            Int         @id @default(sequence())
  table         String
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

model ReservationSlot {
  startIsoDate       String
  endIsoDate         String
  reservationTableId String
  reservationTable   ReservationTable @relation(fields: [reservationTableId], references: [id])
  reservationId      Int
  reservation        Reservation      @relation(fields: [reservationId], references: [id])

  @@id([startIsoDate, reservationTableId])
  @@index([startIsoDate])
  @@index([reservationTableId])
  @@index([reservationId])
}

model ReservationTable {
  id               String            @id
  reservationSlots ReservationSlot[]
}

model Discount {
  id            Int            @id @default(sequence())
  endAt         DateTime
  startAt       DateTime
  amount        Decimal
  discountItems DiscountItem[]
}

model DiscountItem {
  id         Int      @id @default(sequence())
  discountId Int
  menuItemId Int
  discount   Discount @relation(fields: [discountId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([discountId])
  @@index([menuItemId])
}

model Sales {
  id         Int      @id @default(sequence())
  price      Decimal
  quantity   Int
  total      Decimal
  soldAt     DateTime
  menuItemId Int
  orderId    Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])

  @@index([menuItemId])
  @@index([orderId])
}

enum Status {
  Overstock
  Understock
  InBalance
}

model Equipment {
  id          Int     @id @default(sequence())
  name        String
  description String
  price       Decimal
  quantity    Int
  status      Status
}

model Supplier {
  id             Int             @id @default(sequence())
  name           String
  description    String
  contactNumber  String
  emailAddress   String
  address        String
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id                 Int                 @id @default(sequence())
  createdAt          DateTime            @default(now())
  supplierId         Int
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]

  @@index([supplierId])
}

model PurchaseOrderItem {
  id              Int           @id @default(sequence())
  name            String
  quantity        Int
  purchaseOrderId Int
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@index([purchaseOrderId])
}

model Ingredient {
  id          Int      @id @default(sequence())
  name        String
  description String
  price       Decimal
  quantity    Int
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
